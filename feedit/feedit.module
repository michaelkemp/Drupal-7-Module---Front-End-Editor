<?php

function feedit_init() {
	$css = variable_get('feedit_EXTRA_CSS', '');
	if (trim($css) != "") {
		drupal_add_css($css, array('type' => 'inline', 'group' => CSS_THEME) );
	}
}

function feedit_ckeditor_settings_alter(&$settings, $conf) {
	$settings["js_conf"]["extraAllowedContent"] = " 'ul(*);ol(*);p(*);div(*);span(*);' ";
	$settings["format_tags"] = "p;div;h1;h2;h3;h4";
}

function feedit_menu() {
    $items = array();
    $items['feeditAjaxSave'] = array(
        'title' => 'Save Node Data',
        'page callback' => 'feeditAjaxSave',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );
	  $items['admin/config/content/feedit'] = array(
	    'title' => 'Front End Edit Config',
	    'description' => 'Configuration for Front End Edit module',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('feedit_form'),
	    'access arguments' => array('access administration pages'),
	    'type' => MENU_NORMAL_ITEM,
	  );

    return $items;
}

function feedit_form($form, &$form_state) {

    $form['feedit_EXTRA_CSS'] = array(
        '#type' => 'textarea',
        '#title' => t('CSS to apply to User Added Classes'),
        '#default_value' => variable_get('feedit_EXTRA_CSS', ''),
        '#description' => t("CSS to apply to 'User Added' classes."),
        '#rows' => 20,
        '#cols' => 80,
        '#required' => FALSE,
    );

    return system_settings_form($form);
}


function feeditAjaxSave() {
    global $user;
    if ($user->uid == 0) { exit("error"); }
    
    $json = file_get_contents('php://input');
    $obj = json_decode($json,true);
    
    $nid = isset($obj['node']) ? intval($obj['node']) : 0;
    $field = isset($obj['field']) ? trim($obj['field']) : "";
    $html = isset($obj['html']) ? trim($obj['html']) : "";
    
    // ================================ START -- REPLACE STYLES WITH CLASSES ================================
	$listC2S = array(
		"ul-circle"			=>	"list-style-type:circle",
		"ul-disc"			=>	"list-style-type:disc",
		"ul-square"			=>	"list-style-type:square",
		"ol-lower-roman"	=>	"list-style-type:lower-roman",
		"ol-upper-roman"	=>	"list-style-type:upper-roman",
		"ol-lower-alpha"	=>	"list-style-type:lower-alpha",
		"ol-upper-alpha"	=>	"list-style-type:upper-alpha",
		"ol-decimal"		=>	"list-style-type:decimal"
		);
	$textC2S = array(
		"text-align-center"	=>  "text-align:center",
		"text-align-right"	=>  "text-align:right"
		);
	$tags = array("p","ul","ol");

    if ($html != "") {
    	$dom=new DomDocument();
    	$dom->encoding = 'utf-8';
    	$dom->strictErrorChecking = false;
    	$dom->loadHTML(utf8_decode($html));
    	foreach($tags as $tag) {
    		foreach($dom->getElementsByTagName($tag) as $item) {
    			$class=strtolower($item->getAttribute('class'));
    			$style=strtolower(str_replace(" ","",$item->getAttribute('style')));
    			
    			// CHECK LIST STYLES
    			if (feedInStr($style, $listC2S)) {
    				foreach($listC2S as $cl=>$st) {
    					$class=str_replace($cl, "", $class);
    				}
    				foreach($listC2S as $cl=>$st) {
    					if(strpos($style,$st) !== false) {
    						$class.= " " . $cl;
    					}
    				}
    				
    			}
    			
    			// CHECK TEXT ALIGN STYLES
    			if (feedInStr($style, $textC2S)) {
    				foreach($textC2S as $cl=>$st) {
    					$class=str_replace($cl, "", $class);
    				}
    				foreach($textC2S as $cl=>$st) {
    					if(strpos($style,$st) !== false) {
    						$class.= " " . $cl;
    					}
    				}
    			}
    			$class = trim(preg_replace('/\s+/', ' ', $class));
    			$item->removeAttribute('style');
    			$item->setAttribute('class', $class);
    			$html=$dom->saveHTML();
    		}
    	}
    }    
    // ================================ END -- REPLACE STYLES WITH CLASSES ================================

    if (($nid != 0) && ($field != "")) {
        // DONT UPDATE NODE UNLESS USER HAS RIGHTS!!
        $node = node_load($nid);
        $account = user_load($user->uid);
        if (node_access('update', $node, $account)) {
            $node->{$field}[LANGUAGE_NONE][0]['value'] = $html;
            $node->{$field}[LANGUAGE_NONE][0]['safe_value'] = $html;
            node_save($node);
            echo "ok";
        } else {
            echo "error";
        }
    } else {
        echo "error";
    }

}

function feedInStr($string, $array) {
    $values = array_values($array);
    foreach ($values as $val) { 
		if (strpos($string, $val) !== false) { 
            return true;
        }
    }
    return false;
}

function feedit_block_info(){
    $blocks = array();
    $blocks['feeditBlock'] = array(
        'info' => t("Front End Edit"),
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    return $blocks;
}

function feedit_block_view($block_name = ""){
    switch ($block_name) {
        case 'feeditBlock':
            $block['subject'] = t("Front End Edit");
            $block['content'] = feeditEdit();
            return $block;
    }
}


function feeditEdit() {
    global $user;
    global $base_url;

    $nid = (arg(0) == 'node' && is_numeric(arg(1))) ? arg(1) : 0;
    
    // If user not logged in OR not a node
    if (($user->uid == 0) || ($nid == 0)) { return array('#type'=>'markup', '#prefix'=>'', '#markup'=>'', '#suffix'=>''); }
    
    // If user does not have update rights on the node
    $node = node_load($nid);
    $account = user_load($user->uid);
    if (!node_access('update', $node, $account)) { return array('#type'=>'markup', '#prefix'=>'', '#markup'=>'', '#suffix'=>''); }

    
    $curPath = url(current_path(), array('alias'=>false,'absolute'=>true));
    $modPath = $base_url . "/". drupal_get_path('module', 'feedit');
    
    $gear = "<img src='${modPath}/images/gear.png'>";
    $css = ".feedit-backend, .feedit-toggle { height:33px; padding: 2px 5px 5px 5px; }";
    $css.= ".feedit-backend img { height: 16px; width: 16px; }";
    drupal_add_css($css, 'inline');
    
    if (isset($_GET["edit"])) {
// ============================================================= ENABLE FEEDIT =============================================================

$ckeditor = $modPath . '/ckeditor/ckeditor.js';
drupal_add_js($ckeditor, array('type'=>'file'));

$js=<<<JS
    (function ($) { jQuery(document).ready(function($) {
        
        CKEDITOR.disableAutoInline = true;
        
        var editCnt = 1;
        
        $('div[contenteditable="false"]').each(function() {
            var id = "editor" + editCnt;
            ++editCnt;
            
            $(this).attr('id',id);
            $(this).attr('contenteditable','true');
            
            var editor = CKEDITOR.inline(id);
            editor.on( 'change', function( evt ) {
                if (evt.editor.checkDirty()) {
                    evt.editor.getCommand('saveAjax').enable();
                } else {
                    evt.editor.getCommand('saveAjax').disable();
                }
            });
            
        });    
        
    }); }(jQuery));    
JS;
drupal_add_js($js, 'inline');
            
// ============================================================= DISABLE FEEDIT =============================================================
            $html = "<a href='${curPath}'><button class='feedit-toggle'>Edit Off</button></a>";
            if ($nid) {
                $url = url("node/${nid}/edit", array('alias'=>false,'absolute'=>true));
                $html.= "<a href='${url}'><button class='feedit-backend'>${gear}</button></a>";
            }
            $output = array (
                '#type' => 'markup',
                '#prefix' => '<div class="feedit-buttons">',
                '#markup' => $html,
                '#suffix' => '</div>',
                );
            return $output; 
            
    } else {
// ============================================================= ENABLE FEEDIT =============================================================
            
            $editPath = (strpos($curPath,"?") === false) ? "${curPath}?edit=1" : "${curPath}&edit=1";
            $html = "<a href='${editPath}'><button class='feedit-toggle'>Edit On</button></a>";
            if ($nid) {
                $url = url("node/${nid}/edit", array('alias'=>false,'absolute'=>true));
                $html.= "<a href='${url}'><button class='feedit-backend'>${gear}</button></a>";
            }
            $output = array (
                '#type' => 'markup',
                '#prefix' => '<div class="feedit-buttons">',
                '#markup' => $html,
                '#suffix' => '</div>',
                );
            return $output;         
    }
    
}

function feedit_preprocess_field(&$variables) {
    global $user;
    global $base_url;

    $nid = (arg(0) == 'node' && is_numeric(arg(1))) ? arg(1) : 0;
    $admin = path_is_admin(current_path());
    
    // If user logged in AND is a node AND not in backend
    if (($user->uid != 0) && ($nid != 0) && (!$admin)) {
        $node = node_load($nid);
        $account = user_load($user->uid);
        // check user has update rights on the node
        if (node_access('update', $node, $account)) {
            $fieldName = isset($variables['element']['#field_name']) ? $variables['element']['#field_name'] : ""; // field_name
            $fieldType = isset($variables['element']['#field_type']) ? $variables['element']['#field_type'] : ""; // text_with_summary
            $viewMode = isset($variables['element']['#view_mode']) ? $variables['element']['#view_mode'] : ""; // full
            $fieldFormat = isset($variables['element']['#items'][0]['format']) ? $variables['element']['#items'][0]['format'] : ""; // filtered_html
            
            $nodeID = isset($variables['element']['#object']->nid) ? $variables['element']['#object']->nid : 0;
            
            if ( (($fieldType=='text_with_summary') && ($fieldFormat=='filtered_html')) || (($fieldType=='text_long') && ($fieldFormat=='filtered_html')) ) {
                $markup = isset($variables['items'][0]['#markup']) ? $variables['items'][0]['#markup'] : "";
                if ($markup != "") {
                    $variables['items'][0]['#markup'] = "<div data-url='${base_url}' data-node='${nodeID}' data-field='${fieldName}' contenteditable='false'>${markup}</div>";
                }
            }
        }
    }
}
